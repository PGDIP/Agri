# -*- coding: utf-8 -*-

# lt = [1,2,3,4,5,6,1,2,3,4,5,6,0]
# a= []
# print()

# print(sorted(list(set(lt))),'.............')

# for item in lt:
# 	if item not in a:
# 		a.append(item)
# print(sorted(a),']]]]]]]]]]]')

# for i in range(0,len(lt)):
# 	j = i+1
# 	while j < len(lt):
# 		if lt[i] == lt[j]:
# 			del lt[j]
# 		j += 1
# print(sorted(lt),'1111111111111')

class Person ():
	def __new__(cls, *args, **kwargs): # cls，代表要实例化的类
		print('\'call __new__() method\'')
		#weight = int(args[2].replace('kg',' ').strip())
		r = super(Person, cls).__new__(cls)
		r.initialize('*args')
		return r  #返回 实例

	def initialize(self,name = None, age = None, weight = None):  # 自定义 构造器
		print('\'call initialize() method\'')
		self.name = name
		self.age = age
		self.__weight = weight  #私有属性

	# def __init__ (self,*args):
	# 	self.args = args
	# 	
	def __init__ (self,name = None, age = None, weight = None): # self 是 new 返回的实例
		print('\'call __init__() method\'')
		self.name = name
		self.age = age
		self.__weight = weight  #私有属性

	def personMethod (self):
		print('父类普通方法')

	@classmethod
	def staticMethod (self):
		print('父类静态方法')
		return '父类静态方法'

class Program(Person):
	def __init__(self, name = None, age = None, weight = None, height = None, address = None):
		super(Program, self).initialize(name, age, weight)
		#Person.__init__(self,name, age, weight)
		self.height = height
		self.address = address

	def personMethod(self):
		print(self.staticMethod())

def nb(object):
	print(object.__dict__)
		

if __name__ == '__main__':
	# p = Person('Alan','20','10kg') # 实例化类时的调用顺序：__new__() >>>> initialize()
	# p.PersonMethod()
	# Person.staticMethod()
	# print(type(p))
	# print(p.__dict__,'>>>>当前实例的各个属性') #当前实例的各个属性
	# print(p.name,p.age,p._Person__weight,'>>>>实例的键值')
	# print(dir(p),'>>>>实例的所有属性') #实例的所有属性
	
	s = Program('Alan','20','120kg','170cm','成都')
	nb(s)
	s.personMethod() # 调用父类的方法
	print(isinstance(s, Person))
	print(s.__dict__)


